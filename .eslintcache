[{"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/index.js":"1","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/reportWebVitals.js":"2","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/App.js":"3","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/Header.js":"4","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/Footer.js":"5","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/Main.js":"6","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/SatSetting.js":"7","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/SatelliteList.js":"8","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/constants.js":"9","/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/WorldMap.js":"10"},{"size":462,"mtime":1607571274133,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607402455766,"results":"13","hashOfConfig":"12"},{"size":257,"mtime":1607573757186,"results":"14","hashOfConfig":"12"},{"size":448,"mtime":1608182830113,"results":"15","hashOfConfig":"12"},{"size":299,"mtime":1608184131729,"results":"16","hashOfConfig":"12"},{"size":2195,"mtime":1608181618108,"results":"17","hashOfConfig":"12"},{"size":4800,"mtime":1607576606265,"results":"18","hashOfConfig":"12"},{"size":2667,"mtime":1608182449761,"results":"19","hashOfConfig":"12"},{"size":306,"mtime":1608175319133,"results":"20","hashOfConfig":"12"},{"size":6901,"mtime":1608180990779,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"14mverc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/index.js",[],["44","45"],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/reportWebVitals.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/App.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/Header.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/Footer.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/Main.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/SatSetting.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/SatelliteList.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/constants.js",[],"/Users/wml/IdeaProjects/Starlink/StarlinkProject/starlink/src/components/WorldMap.js",["46","47","48"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap1 extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            isDrawing: false\n        };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios\n            .get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => {\n                console.log(\"err in fetch map data \", e.message);\n            });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            const {\n                latitude,\n                longitude,\n                elevation,\n                altitude,\n                duration\n            } = this.props.observerData;\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            const urls = this.props.satData.map(sat => {\n                const { satid } = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                return axios.get(url);\n            });\n\n            axios\n                .all(urls)\n                .then(\n                    axios.spread((...args) => {\n                        return args.map(item => item.data);\n                    })\n                )\n                .then(res => {\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(res);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            return;\n        }\n\n        const len = data[0].positions.length;\n        const { duration } = this.props.observerData;\n        const { context2 } = this.map;\n\n        let now = new Date();\n\n        let i = 0;\n\n        let timer = setInterval(() => {\n            let ct = new Date();\n\n            let timePassed = i === 0 ? 0 : ct - now;\n            let time = new Date(now.getTime() + 60 * timePassed);\n\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                clearInterval(timer);\n                this.setState({ isDrawing: false });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n            }\n\n            data.forEach(sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i]);\n            });\n\n            i += 60;\n        }, 1000);\n    };\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n\n        if (!satlongitude || !satlatitude) return;\n\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(0.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            context.fillStyle = \"#B3DDEF\";\n            context.strokeStyle = \"#000\";\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        });\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n    };\n}\n\nexport default WorldMap1;\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":53,"column":17,"nodeType":"55","messageId":"56","endLine":53,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":99,"column":13,"nodeType":"59","messageId":"60","endLine":99,"endColumn":20},{"ruleId":"53","severity":1,"message":"61","line":103,"column":17,"nodeType":"55","messageId":"56","endLine":103,"endColumn":25},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'altitude' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'duration' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]